{"version":3,"sources":["components/TextFieldFormsy.jsx","views/Home.jsx","App.js","helper/commonUtils.js","helper/constants.js","reportWebVitals.js","index.js"],"names":["TextFieldFormsy","props","name","label","type","value","errorMessage","showError","errorText","TextField","variant","fullWidth","onChange","event","setValue","currentTarget","helperText","error","autoComplete","defaultProps","React","memo","withFormsy","Home","console","log","Container","maxWidth","Grid","container","style","flexGrow","item","xs","sm","padding","Paper","required","Button","color","App","useState","strInput","setStrInput","strKeyEncode","setStrKeyEncode","strKeyDecode","setStrKeyDecode","encode","input","keyEncode","keyDecode","lstAlphabet","split","key","indexOf","toUpperCase","lstInput","output","map","i","join","convertStrToStr","className","e","target","textTransform","maxLength","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2a2256d.chunk.js","sourcesContent":["import { TextField } from '@material-ui/core';\nimport { withFormsy } from 'formsy-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TextFieldFormsy = (props) => {\n  const { name, label, type, value, errorMessage, showError } = props;\n  const changeValue = (event) => {\n    props.setValue(event.currentTarget[type === 'checkbox' ? 'checked' : 'value']);\n  };\n\n  const errorText = showError ? errorMessage : '';\n  return (\n    <div>\n      <TextField\n        type={type}\n        variant=\"outlined\"\n        fullWidth\n        label={label}\n        value={value}\n        name={name}\n        onChange={changeValue}\n        helperText={errorText}\n        error={showError}\n        autoComplete={`${type} === 'password' && 'on'`}\n      />\n    </div>\n  );\n};\n\nTextFieldFormsy.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.string,\n\n  showError: PropTypes.bool.isRequired,\n  errorMessage: PropTypes.string,\n  type: PropTypes.string,\n  setValue: PropTypes.func.isRequired,\n  // getErrorMessage: PropTypes.func.isRequired,\n};\n\nTextFieldFormsy.defaultProps = {\n  type: null,\n  errorMessage: null,\n  value: '',\n};\n\nexport default React.memo(withFormsy(TextFieldFormsy));\n","import React from 'react';\nimport Formsy from 'formsy-react';\nimport { Button, Container, Grid, Paper } from '@material-ui/core';\nimport TextFieldFormsy from '../components/TextFieldFormsy';\n\nconst Home = () => {\n  console.log('render');\n  return (\n    <Container maxWidth=\"lg\">\n      <Grid container style={{ flexGrow: 1 }}>\n        <Grid item xs={12} sm={5} style={{ padding: 10 }}>\n          <Paper>\n            endcode\n            <Formsy>\n              <TextFieldFormsy\n                name=\"encodeText\"\n                label=\"Encode String\"\n                required\n              />\n            </Formsy>\n          </Paper>\n        </Grid>\n        <Grid item sm={2}>\n          <Button variant=\"contained\" color=\"primary\">Convert</Button>\n        </Grid>\n        <Grid item xs={12} sm={5} style={{ padding: 10 }}>\n          <Paper>\n            decode\n            <Formsy>\n              <TextFieldFormsy\n                name=\"decodeText\"\n                label=\"Decode String\"\n                required\n              />\n            </Formsy>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\nexport default Home;\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { convertStrToStr } from './helper/commonUtils';\r\nimport Home from './views/Home';\r\n\r\nfunction App() {\r\n  const [strInput, setStrInput] = useState('');\r\n  const [strKeyEncode, setStrKeyEncode] = useState('');\r\n  const [strKeyDecode, setStrKeyDecode] = useState('');\r\n  const encode = (input, keyEncode, keyDecode) => {\r\n    convertStrToStr(input, keyEncode, keyDecode);\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <input value={strInput} onChange={(e) => setStrInput(e.target.value)} style={{ textTransform: 'uppercase' }} />\r\n      <input maxLength={1} value={strKeyEncode} onChange={(e) => setStrKeyEncode(e.target.value)} />\r\n      <input maxLength={1} value={strKeyDecode} onChange={(e) => setStrKeyDecode(e.target.value)} />\r\n      <button type=\"button\" onClick={() => encode(strInput, strKeyEncode, strKeyDecode)}>Encode</button>\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { alphabet } from './constants';\n\n// encode\nconst convertStrToStr = (input, keyEncode, keyDecode) => {\n  // console.log(input.toUpperCase());\n  const lstAlphabet = alphabet.split('');\n\n  let key = lstAlphabet.indexOf(keyDecode.toUpperCase())\n    - lstAlphabet.indexOf(keyEncode.toUpperCase()); // A encode ==> C output decode\n  if (key < 0) key = 26 + key;\n  const lstInput = input.toUpperCase().split('');\n  console.log(lstInput, input);\n\n  const output = lstInput.map((item) => {\n    if (item === ' ') return ' ';\n    const i = lstAlphabet.indexOf(item) + key;\n\n    // last item and set to first letter\n    if (i > 25) {\n      return lstAlphabet[i - 26];\n    }\n    return lstAlphabet[i];\n  });\n  console.log(output);\n  return output.join('');\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { convertStrToStr };\n","const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst lstMorse = [\n  { key: 'A', value: '._' },\n  { key: 'B', value: '_..' },\n  { key: 'C', value: '_._.' },\n  { key: 'D', value: '_..' },\n  { key: 'E', value: '.' },\n  { key: 'F', value: '.._.' },\n  { key: 'G', value: '__.' },\n  { key: 'H', value: '....' },\n  { key: 'I', value: '..' },\n  { key: 'J', value: '.___' },\n  { key: 'K', value: '_._' },\n  { key: 'L', value: '._..' },\n  { key: 'M', value: '__' },\n  { key: 'N', value: '_.' },\n  { key: 'O', value: '___' },\n  { key: 'P', value: '.__.' },\n  { key: 'Q', value: '__._' },\n  { key: 'R', value: '._.' },\n  { key: 'S', value: '...' },\n  { key: 'T', value: '_' },\n  { key: 'U', value: '.._' },\n  { key: 'V', value: '..._' },\n  { key: 'W', value: '.__' },\n  { key: 'X', value: '_.._' },\n  { key: 'Y', value: '_.__' },\n  { key: 'Z', value: '__..' },\n  { key: 'CH', value: '____' },\n];\n\n// eslint-disable-next-line import/prefer-default-export\nexport { alphabet, lstMorse };\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}